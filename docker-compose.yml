version: "3.8"

networks:
  data_network:
    driver: bridge

services:
  # ===============================
  # 🐘 POSTGRES PARA AIRFLOW
  # ===============================
  postgres:
    image: postgres:15
    container_name: airflow_postgres
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    ports:
      - "5432:5432"
    volumes:
      - ./airflow/postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - data_network

  # ===============================
  # 🪶 AIRFLOW
  # ===============================
  airflow-init:
    build: ./airflow
    container_name: airflow_init
    entrypoint: /bin/bash
    command: >
      -c "
      echo 'Aguardando Postgres...';
      until pg_isready -h postgres -p 5432 -U airflow; do
        sleep 2;
      done;
      echo 'Postgres pronto!';
      airflow db init &&
      airflow users create --username admin --firstname Air --lastname Flow --role Admin --email admin@example.com --password admin
      "
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__CORE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
    depends_on:
      - postgres
    networks:
      - data_network

  airflow-webserver:
    build: ./airflow
    container_name: airflow_webserver
    command: webserver
    ports:
      - "8080:8080"
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__CORE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
    depends_on:
      - airflow-init
    networks:
      - data_network

  airflow-scheduler:
    build: ./airflow
    container_name: airflow_scheduler
    command: scheduler
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__CORE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
    depends_on:
      - airflow-init
    networks:
      - data_network

  # ===============================
  # 🪟 STREAMLIT
  # ===============================
  streamlit-frontend:
    build: ./streamlit-frontend
    container_name: streamlit-frontend
    ports:
      - "8501:8501"
    environment:
      - API_URL=http://fastapi-backend:8000
      - MINIO_ENDPOINT=http://minio:9000
      - MINIO_ACCESS_KEY=minio
      - MINIO_SECRET_KEY=minio123
      - MINIO_BUCKET=bronze
      - STREAMLIT_SERVER_MAXUPLOADSIZE=1024
    depends_on:
      - fastapi-backend
      - minio
    volumes:
      - ./streamlit-frontend:/app
    restart: unless-stopped
    networks:
      - data_network

  # ===============================
  # ⚡ FASTAPI
  # ===============================
  fastapi-backend:
    build: ./fastapi-backend
    container_name: fastapi-backend
    ports:
      - "8000:8000"
    environment:
      - MINIO_ENDPOINT=http://minio:9000
      - MINIO_ACCESS_KEY=minio
      - MINIO_SECRET_KEY=minio123
    depends_on:
      - minio
    volumes:
      - ./fastapi-backend:/app
    restart: unless-stopped
    networks:
      - data_network

  # ===============================
  # 🪣 MINIO
  # ===============================
  minio:
    image: minio/minio
    container_name: minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: minio123
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - ./storage/minio_data:/data
    restart: unless-stopped
    networks:
      - data_network

  create_buckets:
    image: quay.io/minio/mc:latest
    container_name: minio_mc
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      sleep 5;
      mc alias set myminio http://minio:9000 minio minio123;
      mc mb myminio/bronze || true;
      mc mb myminio/silver || true;
      mc mb myminio/gold || true;
      mc anonymous set public myminio/bronze;
      mc anonymous set public myminio/silver;
      mc anonymous set public myminio/gold;
      exit 0;
      "
    networks:
      - data_network